# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- azure-pipelines

# trigger:
# - none

pool:
  name: ci-pool

container:
  # image: ghcr.io/ukri-bench/spack-buildcache-cuda:$(SHA)  # Note: SHA variable must be set in GUI
  # image: ghcr.io/ukri-bench/spack-buildcache-cuda:cfaa8587676f548bea64d4ac6d4ce0cf8f2488c5
  image: ubuntu:24.04
  # endpoint: ghcr-io
  options: --rm --runtime=nvidia --gpus all
  env:
    OMPI_ALLOW_RUN_AS_ROOT: 1
    OMPI_ALLOW_RUN_AS_ROOT_CONFIRM: 1
    PRTE_MCA_rmaps_default_mapping_policy: :oversubscribe

steps:

# - task: Docker
#   displayName: Install sudo package
#   target: host
#   inputs:
#     script: |
#       apt-get -y update
#       apt-get -y  install ca-certificates curl
#       install -m 0755 -d /etc/apt/keyrings
#       curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
#       chmod a+r /etc/apt/keyrings/docker.asc
#       echo \
#         "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
#         $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
#         tee /etc/apt/sources.list.d/docker.list > /dev/null
#       apt-get -y update
#       apt-get -y install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

# Azure container jobs run as non-root user which has sudo permissions,
# but sudo is missing.  Install sudo package...
- task: CmdLine@2
  displayName: Install sudo package
  target: host
  inputs:
    script: |
      cid=`docker container ls -q`
      echo "ID = $cid"
      /usr/bin/docker exec  $cid su -c "apt-get -y update && apt-get -o DPkg::Options::="--force-confold" -y install sudo"

- script: |
    echo Add other tasks to build, test, and deploy your project.
    echo See https://aka.ms/yaml
    ls -alh /usr/local/
    ls -alh /usr/local/bin
  displayName: 'Run a multi-line script'

- script: |
    sudo apt-get -y update
    sudo apt-get -y install wget
    wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2404/x86_64/cuda-keyring_1.1-1_all.deb
    sudo dpkg -i cuda-keyring_1.1-1_all.deb
    sudo apt-get -y update
    sudo apt-get -y install cuda-compiler-12-8
  displayName: 'Install nvcc'

- script: |
    nvidia-smi
    /usr/local/cuda/bin/nvcc --version
    wget https://raw.githubusercontent.com/ukri-bench/benchmark-dolfinx/refs/heads/azure-pipelines/.azure_pipelines/test.cu
    /usr/local/cuda/bin/nvcc test.cu
    ./a.out
  displayName: 'Compile and run'

# - script: |
#     bench_dolfinx --ndofs=1000 --degree=3 --qmode=0 --nreps=1 --mat_comp --float=64 --json a.json
#   displayName: Run (serial)
# - script: |
#     mpirun -n 2 bench_dolfinx --ndofs=500 --degree=3 --qmode=0 --nreps=1 --mat_comp --float=64 --json b.json
#   displayName: Run (parallel)
# - script: |
#     python src/test_output.py a.json
#     python src/test_output.py b.json
#   displayName: Post-process

# trigger:
#   branches:
#     include:
#     - '*'  # must quote since "*" is a YAML reserved character; we want a string
# pool:
#   name: ci-pool

# steps:
# - script: echo Hello, world!
#   displayName: 'Run a one-line script'

# - script: |
#     echo Add other tasks to build, test, and deploy your project.
#     echo See https://aka.ms/yaml
#     ls -alh /usr/local/
#     ls -alh /usr/local/bin
#     nvidia-smi
#   displayName: 'Run a multi-line script'

# - script: |
#     nvidia-smi
#     printf "#include <stdio.h>\n#include <cuda.h>\n__global__ void dkernel(){\nprintf(\"Hello-world\\\n\");}\n int main (){\ndkernel <<<1,1>>>();\ncudaDeviceSynchronize();\nreturn 0;}\n" > test.cu
#     /usr/local/cuda/bin/nvcc test.cu
#     echo "Run test"
#     ./a.out
#     echo "End run test"
#   displayName: 'Compile and run'
