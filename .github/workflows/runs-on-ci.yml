name: Spack build (runs-on)

on:
  # Uncomment the below 'push' to trigger on push
  push:
    branches:
      - "**"
  # pull_request:
  #   branches: [ "main" ]
  # merge_group:
  #   branches:
  #     - main
  workflow_dispatch:

env:
  GITHUB_USER: ${{ github.actor }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    strategy:
      matrix:
        backend:
          [
            # { runtime: cpu, driver: ''},
            # { runtime: rocm, driver: amdgpu_target=gfx90a },
            { runtime: cuda, driver: cuda_arch=75 },
          ]
    # runs-on: ubuntu-24.04
    # runs-on: runs-on=${{ github.run_id }}/runner=2cpu-linux-x64
    # runs-on: runs-on=${{ github.run_id }}/image=ubuntu24-full-arm64/runner=2cpu-linux-x64
    # runs-on: runs-on=${{ github.run_id }}/image=ubuntu24-full-x64/family=m7i.large
    # runs-on: runs-on=${{ github.run_id }}/image=ubuntu24-full-x64/family=m7i.large
    # runs-on: runs-on=${{github.run_id}}/runner=2cpu-linux-x64/image=ubuntu24-full-x64
    # runs-on: runs-on=${{github.run_id}}/runner=2cpu-linux-x64/image=ubuntu24-gpu-x64

    # runs-on: runs-on=${{github.run_id}}/family=g4ad.xlarge/image=ubuntu24-gpu-x64 # AMD GPU
    # runs-on: runs-on=${{github.run_id}}/family=g4dn.xlarge/image=ubuntu24-gpu-x64 # NVIDIA GPU


    # runs-on: "runs-on=${{ github.run_id }}/family=g4dn.xlarge/image=ubuntu22-gpu-x64"
    runs-on:
      # - runs-on=${{github.run_id}}/runner=2cpu-linux-x64/image=ubuntu24-gpu-x64/region=us-east-2
      - runs-on=${{ github.run_id }}
      - family=g4dn.xlarge     # NVIDIA T4 GPU
      - region=us-east-2
      - image=ubuntu24-gpu-x64
      - spot=true
      - tag=nv

    container:
      image: ghcr.io/ukri-bench/spack-buildcache-cuda:e2c77d9a807741c6a6264119ae2831f3c9fbc5cc
      options: --gpus all
      env:
        OMPI_ALLOW_RUN_AS_ROOT: 1
        OMPI_ALLOW_RUN_AS_ROOT_CONFIRM: 1
        PRTE_MCA_rmaps_default_mapping_policy: :oversubscribe
    steps:
      - uses: actions/checkout@v4  # To get post-processing script
      # - name: Login to GitHub Container Registry
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ghcr.io
      #     username: ${{github.actor}}
      #     password: ${{ secrets.GITHUB_TOKEN }}
      # - name: Run (CPU)
      #   run: |
      #     docker run --runtime=nvidia --gpus all \
      #       ghcr.io/ukri-bench/spack-buildcache-cuda:b2e51ab33b505986555386fcbd634accf26023d5 \
      #       bench_dolfinx --ndofs=10000 --degree=3 --qmode=0 --nreps=1 --mat_comp --float=64 --json a.json
      - name: Run (GPU, serial)
        run: |
          bench_dolfinx --ndofs=10000 --degree=3 --qmode=0 --nreps=1 --mat_comp --float=64 --json a.json
      - name: Check MPI
        run: |
          ompi_info --parsable --all | grep mpi_built_with_cuda_support:value

      - name: Run (GPU, MPI))
        run: |
          mpirun -np 2 bench_dolfinx --ndofs=10000 --degree=3 --qmode=0 --nreps=1 --mat_comp --float=64 --json a.json


  # steps:
  #   env:
  #     OMPI_ALLOW_RUN_AS_ROOT: 1
  #     OMPI_ALLOW_RUN_AS_ROOT_CONFIRM: 1
  #     PRTE_MCA_rmaps_default_mapping_policy: :oversubscribe
  #   steps:
  #     - uses: actions/checkout@v4  # To get post-processing script
  #     - name: Run (CPU)
  #       run: |
  #         bench_dolfinx --ndofs=1000 --degree=3 --qmode=0 --nreps=1 --mat_comp --float=64 --json a.json
  #         mpirun -n 2 bench_dolfinx --ndofs=500 --degree=3 --qmode=0 --nreps=1 --mat_comp --float=64 --json b.json
  #     - name: Post-process
  #       run: |
  #         python src/test_output.py a.json
  #         python src/test_output.py b.json
      # - name: Info
      #   run: |
      #     ls /opt
      #     ls /usr/local
      #     ls /usr/local/cuda
      #     which nvcc
      #     nvidia-smi
        # lsb_release -a
        # gcc -v
        # nvcc --version
        # hipcc --version

      # - uses: actions/checkout@v4

      # - if: ${{ matrix.backend.runtime == 'rocm' }}
      #   name: Install GPU compiler/driver
      #   uses: ukri-bench/spack-configs/actions/install-gpu-driver@main
      #   with:
      #     runtime: rocm

      # - name: Paths
      #   run: |
      #     ls /opt
      #     which hipcc
      #     which rocminfo

      # # - if: ${{ matrix.backend.runtime == 'cuda' }}
      # #   name: Install CUDA
      # #   uses: ukri-bench/spack-configs/actions/cuda@main

      # - name: Set up Spack
      #   uses: spack/setup-spack@v2
      #   with:
      #     ref: develop # Spack version (examples: develop, releases/v0.23)
      #     color: true # Force color output (SPACK_COLOR=always)
      #     path: spack-src # Where to clone Spack      # - name: Get Spack

      # - if: ${{ matrix.backend.runtime == 'cpu' }}
      #   name: Get Spack config (CPU)
      #   run: |
      #     wget -O spack.yml https://raw.githubusercontent.com/ukri-bench/spack-configs/refs/heads/main/configs/gh-actions/spack.yml
      # - if: ${{ matrix.backend.runtime == 'cuda' }}
      #   name: Get Spack config (CUDA)
      #   run: |
      #     wget -O spack.yml https://raw.githubusercontent.com/ukri-bench/spack-configs/refs/heads/main/configs/gh-actions/spack-cuda.yml
      # - if: ${{ matrix.backend.runtime == 'rocm' }}
      #   name: Get Spack config (ROCm)
      #   run: |
      #     wget -O spack.yml https://raw.githubusercontent.com/ukri-bench/spack-configs/refs/heads/main/configs/gh-actions/spack-rocm.yml

      # - name: Add ukri-bench Spack repository and create environment
      #   shell: spack-bash {0}
      #   run: |
      #     spack repo add --name bench_pkgs https://github.com/ukri-bench/spack-packages.git ./bench_pkgs
      #     spack env create . spack.yml
      #     spack -e . mirror add --unsigned --type binary --oci-username-variable GITHUB_USER --oci-password-variable GITHUB_TOKEN local-buildcache oci://ghcr.io/ukri-bench/spack-buildcache
      #     spack -e . config get mirrors


      # - if: ${{ matrix.backend.runtime == 'cpu' }}
      #   name: Install (CPU)
      #   shell: spack-bash {0}
      #   run: |
      #     spack -e . install -j 4 --use-buildcache=package:never,dependencies:auto --add bench-dolfinx

      # - if: ${{ matrix.backend.runtime == 'cuda' || matrix.backend.runtime == 'rocm' }}
      #   name: Install (GPU)
      #   shell: spack-bash {0}
      #   run: |
      #     spack -e . install -j 4 --use-buildcache=package:never,dependencies:auto --add bench-dolfinx+${{ matrix.backend.runtime }} ${{ matrix.backend.driver }}

      # - name: Push packages and update index
      #   shell: spack-bash {0}
      #   env:
      #     GITHUB_USER: ${{ github.actor }}
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: spack -e . buildcache push --base-image ubuntu:24.04 --update-index local-buildcache
      #   if: ${{ !cancelled() }}
