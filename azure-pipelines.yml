# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# trigger:
# - none

pool:
  name: ci-pool

parameters:
- name: SHA
  displayName: 'Image tag'
  type: string
  default: ''
- name: SHAX2
  displayName: 'Test Param2'
  type: string
  default: 'noset'

container:
  # image: ubuntu:24.04
  image: ghcr.io/ukri-bench/spack-buildcache-img:${{parameters.SHA}}
  endpoint: ghcr-io

steps:

- bash: echo "var1 $(SHAVAL)"
  displayName: 'Print Variables'
- script: |
    echo parameters.SHA - ${{parameters.SHA}}
  displayName: 'Params'
- script: |
    echo parameters.SHAX2 - ${{parameters.SHAX2}}
  displayName: 'Params2'


# - script: echo "Region Code: $(regionCode), Build ID: $(buildId)"
#   displayName: 'Print Variables'

# # - script: echo "Region Code: $(regionCode), Build ID: $(buildId)"
# #   displayName: 'Print Variables'

# # - script: echo $(sha)
# # - script: echo ${{ variables['sha'] }}
# # - script: echo ${{ variables.sha }}
# # - script: echo ${{ parameters.azure-template-parameters }}
# # - script: echo ${{ parameters['sha'] }}

# - script: echo Hello, world!
#   displayName: 'Run a one-line script'

# # - script: |
# #     bench_dolfinx --ndofs=1000 --degree=3 --qmode=0 --nreps=1 --mat_comp --float=64 --json a.json
# #   displayName: 'Run benchmark (serial)'

# # - script: |
# #     mpirun -n 2 bench_dolfinx --ndofs=500 --degree=3 --qmode=0 --nreps=1 --mat_comp --float=64 --json b.json
# #   displayName: 'Run benchmark (MPI parallel)'

# # - script: |
# #     python src/test_output.py a.json
# #     python src/test_output.py b.json
# #   displayName: 'Post-process'
